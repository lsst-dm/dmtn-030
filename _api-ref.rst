.. _api-ref:

API Reference Documentation Prototypes
======================================

In the Science Pipelines documentation project, API references are collections of topics that document, in a highly structured format, how to program against the Python and C++ codebase.
Following the :ref:`docs-as-code <docs-as-code>` pattern, documentation content is written in, and extracted from the codebase itself.
We use Numpydoc_ format for Python API documentation, with a toolchain extended from Astropy's `astropy-helpers`_.
For C++, Doxygen inspects the API and code comments to generate an XML file that is processed with breathe_ into reStructuredText content that is built by Sphinx_.

This section describes the prototype implementations of the API documentation infrastructure with two packages: ``daf_base``, and ``validate_base``.
Section :ref:`validate-base-api` describes the case of ``validate_base``, a pure-Python package with extensive documentation written in Numpydoc_.
Section :ref:`daf-base-swig-api` describes Python documentation in ``daf_base``, where many of the Python APIs are implemented in C++ and wrapped with SWIG.
Finally, Section :ref:`daf-base-cpp-api` describes C++ API documentation in ``daf_base`` generated with Doxygen and Breathe_.
This prototype work was performed in tickets :jira:`DM-7094` and :jira:`DM-7095`.

.. _validate-base-api:

Prototype Python API reference implementation for validate_base
---------------------------------------------------------------

``lsst.validate.base`` is a useful prototype for Python API reference documentation since it is pure-Python and was originally written with well-formatted Numpydoc_ docstrings.

Module homepage
^^^^^^^^^^^^^^^

In ``lsst.validate.base``\ ’s module topic, this reStructuredText generates the Python API reference:

.. code-block:: rst

   Python API reference
   ====================
   
   .. automodapi:: lsst.validate.base
   
   .. automodapi:: lsst.validate.base.jsonmixin
      :no-inheritance-diagram:
   
   .. automodapi:: lsst.validate.base.datummixin
      :no-inheritance-diagram:

For each Python module namespace exported by ``lsst.validate.base``, we include a corresponding ``automodapi`` directive on the module topic page.
``automodapi``, obtained from Astropy's `astropy-helpers`_ through the ``documenteer.sphinxconfig.stackconfig``, makes Python API references efficient to build since the ``automodapi`` directive does the following things:

- Collects all functions and classes in a module and generates API references pages for them.
- Builds a table of contents in situ.
- Builds a class inheritance diagram.

To take advantage of ``automodapi``\ ’s semi-automated API reference generation, LSST's Python modules need clean namespaces.
There are two techniques for achieving this:

1. Modules should only export public APIs, using ``__all__``.

2. Sub-package ``__init__`` files should import the APIs of modules to create a cohesive API organization.
   In ``validate_base``, most APIs are imported into the ``__init__.py`` module of ``lsst.validate.base``.
   The ``lsst.validate.base.jsonmixin`` and ``lsst.validate.base.datummixin`` modules were not imported into ``lsst.validate.base`` because they are private APIs, yet still need to be documented.

:numref:`fig-validate-base-api-table` shows the visual layout of a Python API table built by ``automodapi``:

.. _fig-validate-base-api-table:

.. figure:: /_static/validate-base-api-table.png
   :width: 50%

   ``lsst.validate.base`` API contents on the module topic page.

Python API reference pages
^^^^^^^^^^^^^^^^^^^^^^^^^^

As mentioned, ``automodapi`` also creates API reference pages.
Each function and class is documented on a separate page.
:numref:`fig-validate-base-metric` shows the reference page for the ``lsst.validate.base.Metric`` class.

.. _fig-validate-base-metric:

.. figure:: /_static/validate-base-metric@2x-8.png
   :width: 100%

   ``lsst.validate.base.Metric`` class API page, generated by Numpydoc.

Compared to Breathe's HTML output that builds unified references for all API objects in a module, ``automodapi`` documents each function and class in separate pages.
This choice by Astropy is effective because well-documented classes tend to already have long pages (see :ref:`fig-validate-base-metric`); mixing several classes on the same page would create confusion about an API object's class membership as a user scrolls.

Numpydoc implementation notes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The means of crafting API reference content for individual classes and functions is already well resolved.
``automodapi`` uses Numpydoc to extract docstrings from code and build well-formatted reference pages.
DM's usage of Numpydoc is already well-documented in the Developer Guide, and approved for use in `RFC-214`_.

The only unexpected difficulty encountered in the ``lsst.validate.base`` prototype documentation was with class attribute documentation.
Publicly accessible class attributes should be documented, since they form the API along with methods.
Numpydoc's documentation recommends that attributes should be documented in a special "Attributes" section of the class docstring.
For example:

.. code-block:: python

   class Example(object):
       """An example class.

       ...

       Attributes
       ----------
       name : `str`
          The instance name.
       """

       def __init__(self, name):
           self.name = name

However, this attributes section was separate from another attributes section that documented a class's properties.
The correct format, used by Astropy, is to associate a docstring with each attribute where it is declared:

.. code-block:: python

   class Example(object):
       """An example class.

       ...
       """

       hello = None
       """The instance name (`str`)."""

       def __init__(self, name):
           self.name = name

This documentation approach may alter some classes by requiring attribute declarations at the class scope, rather than only during ``__init__``.
However, the outcome is highly useful documentation where all attributes, even class properties are documented together, as in :numref:`fig-validate-base-metric-attributes`.

.. _fig-validate-base-metric-attributes:

.. figure:: /_static/validate-base-metric-attributes@2x-8.png
   :width: 100%

   Attributes table (left) and expanded documentation (right) in ``lsst.validate.base.Metric``.
   Note that regular attributes, like ``name``, are documented alongside attributes implemented as properties, like ``json``.
   See also :numref:`fig-validate-base-api-table` where attribute documentation is shown in the context of the full ``lsst.validate.base.Metric`` reference page.

Another lesson learned from the ``lsst.validate.base`` prototype is that *module docstrings* should not be comprehensive.
In the topic framework, modules are better documented in module topic pages, rather than in code.
If anything, the module docstring may contain a one-sentence summary of the module's functionality.
This summary appears as a subtitle of the module name in ``automodapi`` output.
For example, in :numref:`fig-validate-base-api-table` the module docstring reads: "Framework for measuring and defining performance metrics that can be submitted to the SQUASH service."

In summary, the Python API reference infrastructure created by the Numpy (Numpydoc) and Astropy (``automodapi``) projects is eminently usable for the Science Pipelines documentation without any modifications.

.. _daf-base-swig-api:

Prototype SWIG-wrapped Python API reference for daf_base
--------------------------------------------------------

The Python APIs of ``lsst.daf.base`` are more difficult to generate documentation for since they are not implemented in Python, but rather wrapped with SWIG.
This means that the API will generally be non idiomatic, and docstrings do not conform to Numpydoc_.

In the ``lsst.daf.base`` prototype :jirap:`DM-7095` the wrapped ``lsst.daf.base`` and native ``lsst.daf.base.citizen`` modules are documented with this reStructuredText:

.. code-block:: rst

   Python API reference
   ====================

   .. automodapi:: lsst.daf.base
      :no-inheritance-diagram:
      :skip: long, Citizen_census, Citizen_getNextMemId, Citizen_hasBeenCorrupted, Citizen_init, Citizen_setCorruptionCallback, Citizen_setDeleteCallback, Citizen_setDeleteCallbackId, Citizen_setNewCallback, Citizen_setNewCallbackId, Citizen_swigregister, DateTime_initializeLeapSeconds, DateTime_now, DateTime_swigregister, Persistable_swigregister, PropertyList_cast, PropertyList_swigConvert, PropertyList_swigregister, PropertySet_swigConvert, PropertySet_swigregister, SwigPyIterator_swigregister, VectorBool_swigregister, VectorDateTime_swigregister, VectorDouble_swigregister, VectorFloat_swigregister, VectorInt_swigregister, VectorLongLong_swigregister, VectorLong_swigregister, VectorShort_swigregister, VectorString_swigregister, endl, ends, flush, ios_base_swigregister, ios_base_sync_with_stdio, ios_base_xalloc, ios_swigregister, iostream_swigregister, istream_swigregister, ostream_swigregister, type_info_swigregister, vectorCitizen_swigregister, SwigPyIterator, VectorBool, VectorDateTime, VectorDouble, VectorFloat, VectorInt, VectorLong, VectorLongLong, VectorShort, VectorString, ios, ios_base, iostream, istream, ostream, type_info, vectorCitizen

   .. automodapi:: lsst.daf.base.citizen

Note the extensive curation of the Python namespace required for the wrapped ``lsst.daf.base`` API.
SWIG clutters the Python namespace, making it difficult to automatically identify relevant APIs to document.

:numref:`fig-daf-base-module` shows the ``lsst.daf.base`` API reference contents on its module page.

.. _fig-daf-base-module:

.. figure:: /_static/daf-base-module@2x-8.png
   :width: 100%

   Module page for ``lsst.daf.base`` in the :jira:`DM-7094`\ /\ :jira:`DM-7095` prototyping.
   The Python API reference section is built with Numpydoc's ``automodapi`` (:ref:`daf-base-swig-api`), while the C++ section is assembled from a ``toctree`` of manually-built pages containing ``doxygenclass`` directives (:ref:`daf-base-cpp-api`).

The generated API reference page for a SWIG-wrapped Python class (``lsst.daf.base.Citizen``) is shown in :numref:`fig-citizen-class-py`.
Compared to a Python API documented in Numpydoc_, the docstrings generated by SWIG are not useful.
Additional work, outside the scope of this document, is needed to establish how Python APIs implemented from C++ should be documented.

Meanwhile, note that Numpydoc_ still renders poorly-formed docstrings (albeit, with Sphinx warnings).
This will be useful during early implementation of the Science Pipelines documentation site.

.. _fig-citizen-class-py:

.. figure:: /_static/daf-base-citizen-py@2x-8.png
   :width: 100%

   ``lsst.daf.base.Citizen`` Python API reference page, generated from Numpydoc, of the SWIG-wrapped ``lsst::daf::base::Citizen`` C++ class.

.. _daf-base-cpp-api:

Prototype C++ API reference in daf_base
---------------------------------------

This section explores the prototype API reference documentation for the C++ package ``lsst::daf::base``.
In this case, the C++ source and Doxygen-formatted comments are processed by Doxygen, which yields XML files describing the API (XML is a Doxygen output generated by ``sconsUtils`` in addition to HTML).
When the Sphinx project is built, Breathe_ uses these XML files to generate reStructuredText content.
Mechanisms for configuring Breathe to find the appropriate XML are already included in ``documenteer.sphinxconfig.stackconf``.

Like ``automodapi``, Breathe_ provides a `doxygennamespace <https://breathe.readthedocs.io/en/latest/namespace.html#namespace-example>`__ directive that generates documentation for an entire C++ namespace (like ``lsst::daf::base``).

.. code-block:: rst

   C++ API Reference
   =================
   
   lsst::daf::base
   ---------------

   Classes
   ^^^^^^^

   .. doxygennamespace:: lsst::daf::base
      :project: daf_base

Unlike ``automodapi``, though, this directive inserts all API documentation for the namespace in situ, rather than creating and linking to API reference pages for individual API objects.

To emulate ``automodapi`` with standard Breathe_ directives, we first created a ``toctree`` that linked to manually-built API reference pages for each C++ class:

.. code-block:: rst

   C++ API Reference
   =================
   
   lsst::daf::base
   ---------------

   Classes
   ^^^^^^^

   .. toctree::

      cpp/lsst_daf_base_Citizen
      cpp/lsst_daf_base_DateTime
      cpp/lsst_daf_base_Persistable
      cpp/lsst_daf_base_PropertyList
      cpp/lsst_daf_base_PropertySet
      cpp/lsst_daf_base_PersistentCitizenScope

The output of this ``toctree`` is shown in :numref:`fig-daf-base-module` (right).

Each manually built class reference page uses Breathe_\ ’s ``doxygen`` class directive.
An example for ``lsst::daf::base::Citizen``:

.. code-block:: rst

   #######
   Citizen
   #######

   .. doxygenclass:: lsst::daf::base::Citizen
      :project: daf_base
      :members:

.. _fig-citizen-class-cpp:

.. figure:: /_static/daf-base-citizen@2x-8.png
   :width: 100%

   ``lsst::daf::base::Citizen`` API reference page, generated from breath's ``doxygenclass`` directive.

As :numref:`fig-citizen-class-cpp` shows, C++ class documentation rendered this way is still not as useful as the pure-Python documentation.
One reason is that the Breathe_ output is not typeset as strongly as Numpydoc_ output is.
Better CSS support could help with this.
Second, the comment strings written for :numref:`fig-citizen-class-cpp` itself are not as comprehensive as those for ``lsst.validate.base`` Python classes.
Better C++ documentation standards will help improve content quality (see :jira:`DM-7891` for an effort to address this).

API reference generation conclusions
------------------------------------

In review, the Science Pipelines documentation has three distinct types of API references: pure-Python, wrapped Python, and C++ APIs.
Numpydoc_ and ``automodapi`` are excellent off-the-shelf solutions for generating documentation for Python APIs.
The latter two modes require additional engineering.

In principle, Doxygen and Breathe_ are a good toolchain for generating C++ API references.
The following will improve C++ documentation:

- Improved C++ Doxygen documentation standards.
- Better CSS formatting of ``doxygenclass`` directive output.
- Development of a custom directive that emulates ``automodapi`` by automatically scraping a C++ namespace and generating individual documentation, but still uses ``doxygenclass``.

Generating reference documentation for Python APIs implemented in C++ will be the most difficult challenge.
We will address this separately, in conjunction with LSST's migration from SWIG to Pybind11.
